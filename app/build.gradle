plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.sonarqube'
    id("io.gitlab.arturbosch.detekt").version("1.11.0-RC1")
}
detekt {
    toolVersion = "1.11.0-RC1"
    input = files("src/main/java")
    config = files("$rootDir/config/detekt/detekt.yml")
    //filters = ".*/resources/.*,.*/build/.*"
    //baseline = file("my-detekt-baseline.xml") // Just if you want to create a baseline file.
    reports {
        xml {
            enabled = true                                // Enable/Disable XML report (default: true)
            destination = file("$buildDir/reports/detekt.xml") // Path where XML report will be stored (default: `build/reports/detekt/detekt.xml`)
        }
        html {
            enabled = true                                // Enable/Disable HTML report (default: true)
            destination = file("$buildDir/reports/detekt.html") // Path where HTML report will be stored (default: `build/reports/detekt/detekt.html`)
        }
        txt {
            enabled = true                                // Enable/Disable TXT report (default: true)
            destination = file("$buildDir/reports/detekt.txt") // Path where TXT report will be stored (default: `build/reports/detekt/detekt.txt`)
        }
        custom {
            reportId = "CustomJsonReport"                   // The simple class name of your custom report.
            destination = file("$buildDir/reports/detekt.json") // Path where report will be stored
        }
    }
}
//apply from: "$rootDir/detekt.gradle"
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.hilt.demo"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
sonarqube {
    properties {
        property "sonar.projectName", "HiltApp"
        property "sonar.projectKey", "HiltApp"
        property "sonar.host.url", "http://localhost:9000"
        //property "sonar.language", "kotlin"
        property "sonar.sources", "src/main/java"
        property "sonar.java.sources", "src/main/java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property "sonar.coverage.exclusions", "src/androidTest/java"
        property "detekt.sonar.kotlin.config.path", "$rootDir/config/detekt/detekt.yml"
        property "sonar.issuesReport.html.enable", "true"
        property "sonar.issuesReport.console.enable", "true"

        //property "detekt.sonar.kotlin.filters", ".*/test/.*,.*/resources/.*,.*/build/.*,.*/target/.*"
         property "sonar.kotlin.detekt.reportPaths", "$buildDir/reports/detekt.xml"
         property "sonar.kotlin.detekt.reportPaths", "$buildDir/reports/detekt.xml"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation  "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation  "com.squareup.retrofit2:retrofit-converters:$retrofit_version"
    implementation "com.squareup.retrofit2:retrofit-adapters:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"


    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.0.0'

    //Hilt
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"

    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01'
    // When using Kotlin.
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha01'

    //Coroutine Testing ......
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'

    // Testing

    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.11.0-RC1"

}